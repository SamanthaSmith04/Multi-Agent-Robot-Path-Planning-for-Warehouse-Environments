function [updated_plan, changed_plan, current_index_update] = dynamic_RRT_replanning(plan, current_plan_step, lidar, current_pose, uM, current_velocity, map, scale, L)
   updated_plan = plan;
   changed_plan = false;
   safety_region_size = 1; % Safety region size in units
   current_index_update = 0;
   T = 0.01; % Sampling interval in seconds

   % Check if safety region is empty
   ranges = lidar(current_pose);
   if any(ranges < safety_region_size)
       % Calculate deviation angle C(t) between current pose and waypoint
       theta_t = atan2(plan(current_plan_step, 2) - current_pose(2), plan(current_plan_step, 1) - current_pose(1));
       theta = current_pose(3);
       num_waypoints = size(plan, 1);
       angle_to_waypoint = atan2(plan(:, 2) - current_pose(2), plan(:, 1) - current_pose(1));
       [~, closest_waypoint_index] = min(abs(theta_t - angle_to_waypoint));
        
       Aj_minus = angle_to_waypoint(closest_waypoint_index);
       Aj_plus = angle_to_waypoint(closest_waypoint_index + 1);
       Aj = (Aj_minus + Aj_plus) / 2;
       Csat = saturation_function(Aj - theta, uM, T);

       % Calculate total velocity
       v = sqrt(current_velocity(1)^2 + current_velocity(2)^2);
       new_path_point = [current_pose(1) + v * cos(Csat), current_pose(2) + v * sin(Csat)];
       distance_between_new_and_current = norm(new_path_point - current_pose(1:2)');
       distance_between_current_and_next_original = norm(plan(current_plan_step, :) - current_pose(1:2)');
       
       % Check collision and update plan
       if ~collision_detector(current_pose(1), current_pose(2), new_path_point(1), new_path_point(2), map, scale)
           if current_plan_step+1 < size(plan,1) && distance_between_current_and_next_original >= distance_between_new_and_current && distance_between_current_and_next_original >= distance_between_new_and_current
               updated_plan = [plan(1:current_plan_step-1, :); new_path_point; plan(current_plan_step+1:end, :)];
               disp("CASE 1")
               current_index_update = -1
           else
               updated_plan = [plan(1:current_plan_step-1, :); new_path_point; plan(current_plan_step:end, :)];
               disp("CASE 2")
           end
           changed_plan = true;
           current_index_update = 1;
       end
   end
end